stages:
  - deploy

default:
  before_script:
    - | # export env file and copy routing table to pyalbert config
      if [[ $CI_COMMIT_BRANCH = "staging" ]]; then
        echo "info: export staging env file"
        while IFS='=' read -r key value; do export "$key"="$value"; done < <(grep -v "^#" $STAGING__ENV_FILE)
        cp $STAGING__ENV_FILE ./.env

      elif [[ $CI_COMMIT_BRANCH = "main" ]]; then
        echo "info: export production env file"
        while IFS='=' read -r key value; do export "$key"="$value"; done < <(grep -v "^#" $PROD__ENV_FILE)
        cp $PROD__ENV_FILE ./.env
      fi

deploy:
  rules:
    - if: $CI_COMMIT_BRANCH == "main" || $CI_COMMIT_BRANCH == "staging"
  stage: deploy
  image: alpine:latest
  script:
    - | # ssh connection setup
      chmod og= $CI_DEPLOY_USER_SSH_PRIVATE_KEY
      apk update
      apk add openssh-client
    - | # send deployment files to remote server
      mkdir -p ./${CI_JOB_ID}
      cp -r ./app ./${CI_JOB_ID}
      cp ./docker-compose.yml ./${CI_JOB_ID}/docker-compose.yml
      cp ./Dockerfile ./${CI_JOB_ID}/Dockerfile
      cp ./pyproject.toml ./${CI_JOB_ID}/pyproject.toml
      cp ./.env ./${CI_JOB_ID}/.env
      scp -i $CI_DEPLOY_USER_SSH_PRIVATE_KEY -o StrictHostKeyChecking=no -r ./${CI_JOB_ID} ${CI_DEPLOY_USER}@${CI_DEPLOY_HOST}:/home/${CI_DEPLOY_USER}/${CI_JOB_ID}
    - | # deploy app to remote server
      ssh -i $CI_DEPLOY_USER_SSH_PRIVATE_KEY -o StrictHostKeyChecking=no ${CI_DEPLOY_USER}@${CI_DEPLOY_HOST} "
      cd /home/${CI_DEPLOY_USER}/${CI_JOB_ID}
      mkdir -p /data/tchapbot
      
      export COMPOSE_FILE=/home/${CI_DEPLOY_USER}/${CI_JOB_ID}/docker-compose.yml
      export COMPOSE_PROJECT_NAME=albert-tchapbot

      docker compose down
      docker tag albert/tchapbot:latest albert/tchapbot:old || true
      docker image rm albert/tchapbot:latest || true
      docker compose up --detach
      docker image rm albert/tchapbot:old || true

      rm -rf /home/${CI_DEPLOY_USER}/${CI_JOB_ID}
      "
